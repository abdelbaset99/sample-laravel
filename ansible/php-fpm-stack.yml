---
- name: Ensure PHP_FPM stack is deployed
  hosts: localhost
  gather_facts: yes
  become: yes
  vars:
    # Define the subdomains and SSL certificate path
    domain: intern.local
    subdomains:
      hr:
        port: 9001
      devops:
        port: 9002
    ssl_cert_path: /etc/nginx/ssl
    # deploy_user: "{{ ansible_user | default(ansible_env.USER) | default('ubuntu') }}"
    deploy_user: abdelbaset
    app_stack_file: /home/{{ deploy_user }}/docker-stack.yml

  vars_files:
    - secrets.yml

  tasks:
    - name: Update OS packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Ensure required packages for Docker are installed
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        state: present

    - name: Ensure Docker GPG key is added
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Ensure Docker repository is added
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present

    - name: Ensure Docker is installed
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Initialize Docker Swarm manager if not already initialized
      shell: docker swarm init || true
      args:
        warn: false

    - name: Ensure Nginx is installed
      package:
        name: nginx
        state: latest

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Ensure Nginx service is running
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Ensure SSL directory exists
      file:
        path: "{{ ssl_cert_path }}"
        state: directory
        mode: "0755"

    - name: Generate self-signed SSL certificate for each domain
      shell: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout {{ ssl_cert_path }}/{{ item.key }}.{{ domain }}.key \
          -out {{ ssl_cert_path }}/{{ item.key }}.{{ domain }}.crt \
          -subj "/CN={{ item.key }}.{{ domain }}"
      loop: "{{ subdomains | dict2items }}"
      args:
        creates: "{{ ssl_cert_path }}/{{ item.key }}.{{ domain }}.crt"

    - name: Generate Nginx configuration for each domain
      template:
        src: nginx-site.conf.j2
        dest: /etc/nginx/sites-available/{{ item.key }}.conf
      vars:
        server_name: "{{ item.key }}.{{ domain }}"
        ssl_path: "{{ ssl_cert_path }}"
        app_port: "{{ item.value.port }}"
      loop: "{{ subdomains | dict2items }}"

    - name: Enable Nginx configuration for each domain
      file:
        src: /etc/nginx/sites-available/{{ item.key }}.conf
        dest: /etc/nginx/sites-enabled/{{ item.key }}.conf
        state: link
      loop: "{{ subdomains | dict2items }}"

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test
      ignore_errors: yes

    - name: Reload Nginx to apply changes
      service:
        name: nginx
        state: reloaded
      when: nginx_test.rc == 0

    - name: Create deployment directory for stack files
      file:
        path: /home/{{ deploy_user }}/docker-deploy
        state: directory
        owner: "{{ deploy_user }}"
        mode: "0755"

    - name: Copy MySQL configuration files
      copy:
        src: "{{ item }}"
        dest: /home/{{ deploy_user }}/docker-deploy/{{ item }}
        owner: "{{ deploy_user }}"
        mode: "0644"
      loop:
        - mysql-primary.cnf
        - mysql-replica.cnf

    - name: Copy MySQL initialization scripts
      copy:
        src: "{{ item }}"
        dest: /home/{{ deploy_user }}/docker-deploy/{{ item }}
        owner: "{{ deploy_user }}"
        mode: "0755"
      loop:
        - mysql-primary-init.sh
        - mysql-replica-init.sh

    - name: Copy nginx configuration
      copy:
        src: nginx.conf
        dest: /home/{{ deploy_user }}/docker-deploy/nginx.conf
        owner: "{{ deploy_user }}"
        mode: "0644"

    - name: Create MySQL root password secret
      shell: echo "{{ mysql_root_password }}" | docker secret create mysql_root_password - || true
      args:
        warn: false
      no_log: true

    - name: Create MySQL user password secret
      shell: echo "{{ mysql_password }}" | docker secret create mysql_password - || true
      args:
        warn: false
      no_log: true

    - name: Generate Docker stack file for each subdomain
      template:
        src: docker-stack.yml.j2
        dest: /home/{{ deploy_user }}/docker-deploy/{{ item.key }}-stack.yml
      vars:
        app_port: "{{ item.value.port }}"
      loop: "{{ subdomains | dict2items }}"

    - name: Deploy Docker stack for each subdomain
      shell: docker stack deploy -c /home/{{ deploy_user }}/docker-deploy/{{ item.key }}-stack.yml {{ item.key }}-stack
      args:
        chdir: /home/{{ deploy_user }}/docker-deploy
      loop: "{{ subdomains | dict2items }}"

    - name: Wait for Docker services to be ready
      pause:
        seconds: 30

    - name: Check Docker stack services
      shell: docker service ls
      register: docker_services

    - name: Display Docker services
      debug:
        var: docker_services.stdout_lines

    - name: Check if ports are listening
      shell: netstat -tlnp | grep -E ':(9001|9002)'
      register: listening_ports
      ignore_errors: yes

    - name: Display listening ports
      debug:
        var: listening_ports.stdout_lines
